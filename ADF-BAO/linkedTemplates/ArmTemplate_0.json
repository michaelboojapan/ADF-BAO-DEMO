{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "データ ファクトリ名",
			"defaultValue": "ADF-BAO"
		},
		"AzureBlobStorageBao_connectionString": {
			"type": "secureString",
			"metadata": "'AzureBlobStorageBao' の 'connectionString' のセキュリティで保護された文字列"
		},
		"AzureSqlDatabaseDemo3_connectionString": {
			"type": "secureString",
			"metadata": "'AzureSqlDatabaseDemo3' の 'connectionString' のセキュリティで保護された文字列"
		},
		"demo3_trigger1_properties_demo3 - parameterize_parameters_param_db_username": {
			"type": "string",
			"defaultValue": "bao"
		},
		"demo3_trigger1_properties_demo3 - parameterize_parameters_param_db_password": {
			"type": "string",
			"defaultValue": "Mb864273"
		},
		"demo3_trigger1_properties_demo3 - parameterize_parameters_param_db_tbl_name": {
			"type": "string",
			"defaultValue": "employees"
		},
		"demo2EventBasedTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a2852655-9338-4170-a12f-7c739dd1b7c4/resourceGroups/RG-BAO/providers/Microsoft.Storage/storageAccounts/storageaccounttest1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageBao')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageBao_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDemo3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"username": {
						"type": "string"
					},
					"passsword": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseDemo3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo3_ssdb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDemo3",
					"type": "LinkedServiceReference",
					"parameters": {
						"username": {
							"value": "@dataset().db_username",
							"type": "Expression"
						},
						"passsword": {
							"value": "@dataset().db_password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"db_username": {
						"type": "string"
					},
					"db_password": {
						"type": "string"
					},
					"db_tbl_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "int",
						"precision": 10
					},
					{
						"name": "age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mail_address",
						"type": "varchar"
					},
					{
						"name": "phone_no",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dep_id",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().db_tbl_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDemo3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputDept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageBao",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"folderPath": "input",
						"container": "containerbao"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depId",
						"type": "String"
					},
					{
						"name": "depName managerEmpId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageBao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputEmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageBao",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "input",
						"container": "containerbao"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depId",
						"type": "String"
					},
					{
						"name": "depName managerEmpId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageBao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputEmpDept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageBao",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "containerbao"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageBao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawDept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageBao",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "deparment.csv",
						"folderPath": "raw",
						"container": "containerbao"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depId",
						"type": "String"
					},
					{
						"name": "depName managerEmpId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageBao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawEmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageBao",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "raw",
						"container": "containerbao"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empId",
						"type": "String"
					},
					{
						"name": " name",
						"type": "String"
					},
					{
						"name": " gendar",
						"type": "String"
					},
					{
						"name": " age",
						"type": "String"
					},
					{
						"name": " mail",
						"type": "String"
					},
					{
						"name": " phoneNo",
						"type": "String"
					},
					{
						"name": " salary",
						"type": "String"
					},
					{
						"name": " department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageBao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo1 - copy data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Dept",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "depId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "depId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "depName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "depName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "managerEmpId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "managerEmpId",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rawDept",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "inputDept",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Emp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rawEmp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "inputEmp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rawDept')]",
				"[concat(variables('factoryId'), '/datasets/inputDept')]",
				"[concat(variables('factoryId'), '/datasets/rawEmp')]",
				"[concat(variables('factoryId'), '/datasets/inputEmp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo3 - parameterize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data 2 SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "containerbao/input/employee.csv"
							},
							{
								"name": "Destination",
								"value": "dbo.@{pipeline().parameters.param_db_tbl_name}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "empId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emp_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": " name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emp_name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": " age",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "age",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": " mail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "mail_address",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": " phoneNo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "phone_no",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": " salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "salary",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": " department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dep_id",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "inputEmp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "demo3_ssdb",
								"type": "DatasetReference",
								"parameters": {
									"db_username": {
										"value": "@pipeline().parameters.param_db_username",
										"type": "Expression"
									},
									"db_password": {
										"value": "@pipeline().parameters.param_db_password",
										"type": "Expression"
									},
									"db_tbl_name": {
										"value": "@pipeline().parameters.param_db_tbl_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"param_db_username": {
						"type": "string"
					},
					"param_db_password": {
						"type": "string"
					},
					"param_db_tbl_name": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputEmp')]",
				"[concat(variables('factoryId'), '/datasets/demo3_ssdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/join empt dept')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "inputDept",
								"type": "DatasetReference"
							},
							"name": "DeptSource"
						},
						{
							"dataset": {
								"referenceName": "inputEmp",
								"type": "DatasetReference"
							},
							"name": "EmptSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputEmpDept",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "JoinEmptDept"
						}
					],
					"script": "source(output(\n\t\tdepId as short,\n\t\tdepName as string,\n\t\tmanagerEmpId as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DeptSource\nsource(output(\n\t\tempId as short,\n\t\t{ name} as string,\n\t\t{ gendar} as string,\n\t\t{ age} as short,\n\t\t{ mail} as string,\n\t\t{ phoneNo} as string,\n\t\t{ salary} as integer,\n\t\t{ department} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmptSource\nDeptSource, EmptSource join(depId == { department},\n\tjoinType:'right',\n\tbroadcast: 'auto')~> JoinEmptDept\nJoinEmptDept sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['dept_righ_join_emp.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Output"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputDept')]",
				"[concat(variables('factoryId'), '/datasets/inputEmp')]",
				"[concat(variables('factoryId'), '/datasets/outputEmpDept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo2 - dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "join empt dept data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "join empt dept",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DeptSource": {},
									"EmptSource": {},
									"Output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/join empt dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo1TumblingWindowTriger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "run every hour from 06/12 - 6/14",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "demo1 - copy data",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2021-06-12T00:00:00Z",
					"endTime": "2021-06-14T00:00:00Z",
					"delay": "00:10:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/demo1 - copy data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo3_trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "demo3 - parameterize",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_db_username": "[parameters('demo3_trigger1_properties_demo3 - parameterize_parameters_param_db_username')]",
							"param_db_password": "[parameters('demo3_trigger1_properties_demo3 - parameterize_parameters_param_db_password')]",
							"param_db_tbl_name": "[parameters('demo3_trigger1_properties_demo3 - parameterize_parameters_param_db_tbl_name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2021-06-14T22:00:00",
						"endTime": "2021-06-14T22:10:00",
						"timeZone": "Tokyo Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/demo3 - parameterize')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo2EventBasedTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "if file created in input directory, this trigger will execute",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "demo2 - dataflow",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/containerbao/blobs/input/",
					"blobPathEndsWith": "employee.csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('demo2EventBasedTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/demo2 - dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo2TrigerSchedual')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "demo2 - dataflow",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2021-06-13T00:34:00",
						"endTime": "2021-06-13T13:34:00",
						"timeZone": "Tokyo Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/demo2 - dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo2TumblingWindowTriger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "run every hour from 06/12 -06/14, depends on trigger \"demo1TumblingWindowTrigger\"",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "demo2 - dataflow",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2021-06-12T00:00:00Z",
					"endTime": "2021-06-14T00:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "demo1TumblingWindowTriger",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/demo2 - dataflow')]",
				"[concat(variables('factoryId'), '/triggers/demo1TumblingWindowTriger')]"
			]
		}
	]
}